/* tslint:disable */
/* eslint-disable */
/**
 * ユーザー
 * ユーザーCRUD操作をサーバーレス(aws)で構築する
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
    CreateUserInput,
    CreateUserInputFromJSON,
    CreateUserInputToJSON,
    UpdateUserInput,
    UpdateUserInputFromJSON,
    UpdateUserInputToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface DeleteRequest {
    id: string;
}

export interface CreateRequest {
    body: CreateUserInput;
}

export interface GetRequest {
    id: string;
}

export interface UpdateRequest {
    id: string;
    body: UpdateUserInput;
}

/**
 *
 */
export class UserApi extends runtime.BaseAPI {
    /**
     * ユーザー削除
     */
    async _deleteRaw(requestParameters: DeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter requestParameters.id was null or undefined when calling _delete.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザー削除
     */
    async _delete(requestParameters: DeleteRequest): Promise<void> {
        await this._deleteRaw(requestParameters);
    }

    /**
     * 説明
     * ユーザー作成
     */
    async createRaw(requestParameters: CreateRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter requestParameters.body was null or undefined when calling create.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserInputToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, jsonValue => UserFromJSON(jsonValue));
    }

    /**
     * 説明
     * ユーザー作成
     */
    async create(requestParameters: CreateRequest): Promise<User> {
        const response = await this.createRaw(requestParameters);
        return await response.value();
    }

    /**
     * ユーザー取得
     */
    async getRaw(requestParameters: GetRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter requestParameters.id was null or undefined when calling get.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, jsonValue => UserFromJSON(jsonValue));
    }

    /**
     * ユーザー取得
     */
    async get(requestParameters: GetRequest): Promise<User> {
        const response = await this.getRaw(requestParameters);
        return await response.value();
    }

    /**
     * ユーザー更新
     */
    async updateRaw(requestParameters: UpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter requestParameters.id was null or undefined when calling update.'
            );
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter requestParameters.body was null or undefined when calling update.'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserInputToJSON(requestParameters.body),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ユーザー更新
     */
    async update(requestParameters: UpdateRequest): Promise<void> {
        await this.updateRaw(requestParameters);
    }
}
